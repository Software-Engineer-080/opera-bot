from time import time
from telebot import types
from typing import Callable
from functools import wraps
from opera_storage import *
from aiogram.enums import ChatAction
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def inline_buttons(buttons_lst: list, buttons_per_row: int = 2) -> InlineKeyboardMarkup:

    """
    –°–æ–∑–¥–∞—ë—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º

    Parameters
    ----------
    buttons_lst : list
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–¥ –∫–Ω–æ–ø–∫–∏

    buttons_per_row : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ

    Returns
    -------
    markup : InlineKeyboardMarkup
        –ò–Ω–ª–∞–π–Ω–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫
    """

    markup = InlineKeyboardMarkup()

    for i in range(0, len(buttons_lst), buttons_per_row):

        button_row = []

        for j in range(buttons_per_row):

            if i + j < len(buttons_lst):

                button_row.append(InlineKeyboardButton(text=buttons_lst[i + j], callback_data=buttons_lst[i + j]))

        markup.row(*button_row)

    return markup


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–ª–∞–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def buttons(buttons_lst: list, width: int = 3) -> ReplyKeyboardMarkup:

    """
    –°–æ–∑–¥–∞—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–Ω–æ–ø–æ–∫

    Parameters
    ----------
    buttons_lst : list
        –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–¥ –∫–Ω–æ–ø–∫–∏

    width : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ

    Returns
    -------
    keyboard : ReplyKeyboardMarkup
        –¢–µ–∫—Å—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–Ω–æ–ø–æ–∫
    """

    lst = []

    for button in buttons_lst:

        lst.append(types.KeyboardButton(text=button))

    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=width)
    keyboard.add(*lst)

    return keyboard


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏
def throttle(seconds: int) -> Callable:

    def decorator(func):

        last_call = 0

        @wraps(func)
        def wrapper(*args, **kwargs):

            nonlocal last_call

            now = time()

            if now - last_call < seconds:

                return

            last_call = now

            return func(*args, **kwargs)

        return wrapper

    return decorator


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
@throttle(2)
def sending_photo(call, num_menu: str, page: int = 1, previous_message: int = None) -> None:

    """
    –°–æ–∑–¥–∞–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ –º–µ–Ω—é

    Parameters
    ----------
    call
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    num_menu : str
        –ò–º—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞

    page : int
        –°—Ç—Ä–∞–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    previous_message : int | None
        ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–∏—Ç—å

    Raises
    ------
    BaseException
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns
    -------
    None
    """

    try:

        bot.send_chat_action(chat_id=call.chat.id, action=ChatAction.UPLOAD_PHOTO)

        num_menu = num_menu.split("_")[-1]

        buttons_photo = InlineKeyboardMarkup()

        if num_menu in menu_go:

            res_num = menu_go[num_menu]

        else:

            res_num = 0

        cursor = conn.cursor()
        cursor.execute(f"SELECT COUNT(*) FROM base_{num_menu}")
        record_count = cursor.fetchone()[0]
        cursor.close()

        if record_count > 1:

            btn_1 = InlineKeyboardButton("‚¨ÖÔ∏è Prev", callback_data=f"prev_{num_menu}_{page}")
            btn_2 = InlineKeyboardButton(f"{page}/{record_count}", callback_data=" ")
            btn_3 = InlineKeyboardButton("Next ‚û°Ô∏è", callback_data=f"next_{num_menu}_{page}")
            buttons_photo.row(btn_1, btn_2, btn_3)

            if (num_menu == "new") or (num_menu == "event"):

                btn_4 = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚§¥Ô∏è", callback_data="–í–µ—Ä–Ω—É—Ç—å—Å—è ‚§¥Ô∏è")
                buttons_photo.row(btn_4)

            elif num_menu in menu_go:

                btn_4 = InlineKeyboardButton("‚úÖ –ë—Ä–æ–Ω—å", callback_data=f"reserve_{res_num}")
                btn_5 = InlineKeyboardButton("–ö –∑–∞–ª–∞–º ‚èèÔ∏è", callback_data="–ö –∑–∞–ª–∞–º ‚èèÔ∏è")
                buttons_photo.row(btn_4, btn_5)

            else:

                btn_4 = InlineKeyboardButton("–ö–æ –≤—Å–µ–º –º–µ–Ω—é ‚ÜòÔ∏è", callback_data="–ö–æ –≤—Å–µ–º –º–µ–Ω—é ‚ÜòÔ∏è")
                buttons_photo.row(btn_4)

        else:

            if (num_menu == "new") or (num_menu == "event"):

                btn_1 = InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è ‚§¥Ô∏è", callback_data=f"–í–µ—Ä–Ω—É—Ç—å—Å—è ‚§¥Ô∏è")
                buttons_photo.row(btn_1)

            elif num_menu in menu_go:

                btn_1 = InlineKeyboardButton("‚úÖ –ë—Ä–æ–Ω—å", callback_data=f"reserve_{res_num}")
                btn_2 = InlineKeyboardButton("–ö –∑–∞–ª–∞–º ‚èèÔ∏è", callback_data="–ö –∑–∞–ª–∞–º ‚èèÔ∏è")
                buttons_photo.row(btn_1, btn_2)

            elif num_menu == "reg":

                buttons_photo = types.ReplyKeyboardRemove()

            else:

                btn_1 = InlineKeyboardButton("–ö–æ –≤—Å–µ–º –º–µ–Ω—é ‚ÜòÔ∏è", callback_data="–ö–æ –≤—Å–µ–º –º–µ–Ω—é ‚ÜòÔ∏è")
                buttons_photo.row(btn_1)

        desc = ""
        new_photo = ""

        cursor = conn.cursor()
        cursor.execute(f"SELECT url, desc FROM base_{num_menu} WHERE id = ?", (page,))
        result = cursor.fetchone()
        cursor.close()

        if result:

            new_photo = result[0]
            desc = result[1]

            if num_menu == "event":

                myMonth = datetime.today().month

                desc = f"–ú–ï–†–û–ü–†–ò–Ø–¢–ò–Ø {month_dict[myMonth]} üåø"

        if new_photo:

            if num_menu == 'reg':

                bot.send_photo(call.chat.id, photo=new_photo, caption=desc, protect_content=True,
                               reply_markup=buttons_photo)

            else:

                bot.send_photo(call.chat.id, photo=new_photo, caption=desc, disable_notification=True,
                               protect_content=True, reply_markup=buttons_photo)

            if previous_message:

                bot.delete_message(call.chat.id, previous_message)

        else:

            if num_menu == 'reg':

                bot.send_message(chat_id=call.chat.id, text=thank_reg_desc, reply_markup=types.ReplyKeyboardRemove())

            else:

                bot.send_message(chat_id=call.chat.id, text=sorry_desc_base, disable_notification=True,
                                 reply_markup=inline_buttons(main_menu_button))

    except BaseException:

        pass


# –§—É–Ω–∫—Ü–∏—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@throttle(2)
def min_star(call, star: int) -> None:

    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–∏–∑–∫—É—é –æ—Ü–µ–Ω–∫—É

    Parameters
    ----------
    call
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    star : int
        –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö

    Returns
    -------
    None
    """

    update_user_star(call.chat.id, star)

    mess = bot.edit_message_text(chat_id=call.chat.id, message_id=call.message_id, text=min_rate_desc)

    bot.register_next_step_handler(mess, next_mess, star)


# –§—É–Ω–∫—Ü–∏—è –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –ø—Ä–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
@throttle(2)
def next_mess(call, star: int) -> None:

    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–∑—ã–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–æ–π –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∞–¥–µ–ª—å—Ü—É

    Parameters
    ----------
    call
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    star : int
        –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö

    Returns
    -------
    None
    """

    text = call.text

    bot.send_message(chat_id=owner,
                     text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.first_name} —Å ID {call.chat.id} –ø–æ—Å—Ç–∞–≤–∏–ª "
                          f"–æ—Ü–µ–Ω–∫—É {star} –ø–æ –ø—Ä–∏—á–∏–Ω–µ:\n\n{text}")

    bot.send_message(call.chat.id, thank_desc_rate, reply_markup=inline_buttons(main_menu_button))


# –§—É–Ω–∫—Ü–∏—è –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@throttle(2)
def max_star(call, star: int) -> None:

    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç, –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤—ã—Å–æ–∫—É—é –æ—Ü–µ–Ω–∫—É

    Parameters
    ----------
    call
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    star : int
        –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö

    Returns
    -------
    None
    """

    update_user_star(call.chat.id, star)

    star_reply = InlineKeyboardMarkup()
    btn_1 = InlineKeyboardButton(text='üåü–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤üåü', url="https://yandex.ru/maps/org/52896029199")
    btn_2 = InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    star_reply.row(btn_1)
    star_reply.row(btn_2)

    bot.edit_message_text(chat_id=call.chat.id, message_id=call.message_id, text=max_rate_desc, parse_mode="Markdown",
                          disable_web_page_preview=True, reply_markup=star_reply)


# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö
def update_user_star(user_id: int, new_star: int) -> bool:

    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö

    Parameters
    ----------
    user_id : int
        ID —á–∞—Ç–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

    new_star : int
        –û—Ü–µ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ë–∞–∑—É –î–∞–Ω–Ω—ã—Ö

    Returns
    -------
    bool
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
    """

    cursors = conn.cursor()
    cursors.execute("UPDATE users SET star = ? WHERE user_id = ?", (new_star, user_id))
    conn.commit()
    cursors.close()

    return True


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
@throttle(2)
def get_user_data(message: types.Message) -> None:

    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ ID

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    Raises
    ------
    BaseException
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

    Returns
    -------
    None
    """

    try:

        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", [message.chat.id])
        user = cursor.fetchone()
        cursor.close()

        bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=message.message_id,
            text=f"üíÅ–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                 f"–ò–º—è: {user[2]}\n\n"
                 f"–§–∞–º–∏–ª–∏—è: {user[3]}\n\n"
                 f"–ü–æ–ª: {user[12]}\n\n"
                 f"üìÖ: {user[4]}\n\n"
                 f"‚òéÔ∏è: {user[9]}",
            reply_markup=inline_buttons(menu_user_res))

    except BaseException:

        pass


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
def get_total_pages(table_name: str) -> int:

    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö, –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã

    Parameters
    ----------
    table_name : str
        –ò–º—è —Ç–∞–±–ª–∏—Ü—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π

    Returns
    -------
    total_records : int
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î, –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    """

    cursor = conn.cursor()
    cursor.execute(f"SELECT COUNT(*) FROM {table_name};")
    total_records = cursor.fetchone()[0]
    cursor.close()

    return total_records


# –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –∞–∫—Ü–∏–π
@throttle(2)
def sale_photo(message: types.Message) -> None:

    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –∞–∫—Ü–∏–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    Returns
    -------
    None
    """

    cursor = conn.cursor()
    cursor.execute(f"SELECT url FROM base_sale WHERE id = ?", (1,))
    result = cursor.fetchone()
    cursor.close()

    if result:

        bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.UPLOAD_PHOTO)

        photo_url = result[0]

        bot.send_photo(message.chat.id, photo_url, disable_notification=True, caption=sale_desc, protect_content=True,
                       reply_markup=inline_buttons(sale_menu))

    else:

        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–∫—Ü–∏–∏!",
                         reply_markup=inline_buttons(main_menu_button))


# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏
@throttle(2)
def info_reserve(message: types.Message, edit: types.Message) -> None:

    """
    –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    edit : types.Message
        –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–æ–≤–æ–µ

    Returns
    -------
    None
    """

    user_id = message.chat.id

    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
    user = cursor.fetchone()
    cursor.close()

    my_date = user[7]

    if my_date:

        date_value_object = datetime.strptime(my_date, "%d.%m.%Y")

        if user[6] == "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª":

            if date_value_object.date() >= datetime.now().date():

                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=edit.message_id,
                    text=f"üôå –í–∞—à–∞ –±—Ä–æ–Ω—å üôå\n\n"
                         f"–ó–∞–ª: {user[6]}\n\n"
                         f"–°—Ç–æ–ª–∏–∫: {user[10]}\n\n"
                         f"–î–∞—Ç–∞: {user[7]}\n\n"
                         f"–í—Ä–µ–º—è: {user[8]}\n\n",
                    reply_markup=inline_buttons(cancel_button_menu, buttons_per_row=1))

            else:

                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE users SET reserve = NULL, date = NULL, time = NULL, new_table = NULL WHERE user_id = ?",
                    [user_id])
                conn.commit()
                cursor.close()

                bot.edit_message_text(chat_id=message.chat.id, message_id=edit.message_id, text=absence_res_desc,
                                      reply_markup=inline_buttons(res_button_menu))

        elif user[6] is None:

            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET reserve = NULL, date = NULL, time = NULL, new_table = NULL WHERE user_id = ?",
                [user_id])
            conn.commit()
            cursor.close()

            bot.edit_message_text(chat_id=message.chat.id, message_id=edit.message_id, text=absence_res_desc,
                                  reply_markup=inline_buttons(res_button_menu))

        else:

            if date_value_object.date() >= datetime.now().date():

                bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=edit.message_id,
                    text=f"üôå –í–∞—à–∞ –±—Ä–æ–Ω—å üôå\n\n"
                         f"–ó–∞–ª: {user[6]}\n\n"
                         f"–î–∞—Ç–∞: {user[7]}\n\n"
                         f"–í—Ä–µ–º—è: {user[8]}\n\n",
                    reply_markup=inline_buttons(cancel_button_menu, buttons_per_row=1))

            else:

                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE users SET reserve = NULL, date = NULL, time = NULL, new_table = NULL WHERE user_id = ?",
                    [user_id])
                conn.commit()
                cursor.close()

                bot.edit_message_text(chat_id=message.chat.id, message_id=edit.message_id, text=absence_res_desc,
                                      reply_markup=inline_buttons(res_button_menu))

    else:

        cursor = conn.cursor()
        cursor.execute(
            "UPDATE users SET reserve = NULL, date = NULL, time = NULL, new_table = NULL WHERE user_id = ?", [user_id])
        conn.commit()
        cursor.close()

        bot.edit_message_text(chat_id=message.chat.id, message_id=edit.message_id, text=absence_res_desc,
                              reply_markup=inline_buttons(res_button_menu))


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–∞—Ç, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
def new_month() -> list:

    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞—Ç –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞

    Returns
    -------
    date_list : list
        –°–ø–∏—Å–æ–∫ –¥–∞—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    """

    date_list = []

    for i in range(1, 10):

        if (datetime.now().date().day + i) <= m_day:

            day = datetime.now().date().day + i
            month = datetime.now().date().month

        else:

            day = (datetime.now().date().day + i) % m_day
            month = datetime.now().date().month + 1

        date_list.append(f"{day}" + "." + f"{month}".zfill(2) + "." + f"{datetime.now().date().year}")

    return list(date_list)
