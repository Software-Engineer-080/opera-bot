from opera_verify import *


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—Ä–æ–Ω–∏ –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ª–∞
def verify_reserve(message: types.Message, place: str) -> None:

    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏, –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–∞–∫–æ–≤–æ–≥–æ, –±—Ä–æ–Ω–∏—Ä—É–µ—Ç –∑–∞–ª

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    place : str
        –ù–æ–º–µ—Ä –∑–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å

    Returns
    -------
    None
    """

    user_id = message.chat.id

    cursor = conn.cursor()
    cursor.execute("SELECT phone FROM users WHERE user_id = ?", [user_id])
    result_phone = cursor.fetchone()
    cursor.close()

    if int(place) in place_go:

        place_reserve = place_go[int(place)]

    else:

        place_reserve = ""

    if result_phone:

        cursor = conn.cursor()
        cursor.execute("SELECT date FROM users WHERE user_id = ?", [user_id])
        result = cursor.fetchone()
        cursor.close()

        date_value = result[0]

        date_list = list(new_month())

        if date_value:

            date_value_object = datetime.strptime(date_value, "%d.%m.%Y").date()

            if date_value_object >= datetime.now().date():

                bot.send_message(chat_id=message.chat.id,
                                 text=f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –í—ã —É–∂–µ –∏–º–µ–µ—Ç–µ –±—Ä–æ–Ω—å!\n\n"
                                      f"–°–≤–æ—ë –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ!",
                                 disable_notification=True,
                                 reply_markup=inline_buttons(verify_res_menu))

            else:

                cursor = conn.cursor()
                cursor.execute("UPDATE users SET reserve = ? WHERE user_id = ?", (place_reserve, message.chat.id))
                cursor.close()

                if int(place) == 4:

                    reg = bot.send_message(chat_id=message.chat.id, text=good_message_table, disable_notification=True,
                                           reply_markup=buttons(table_res_main_list))

                    bot.register_next_step_handler(reg, reg_reserve)

                else:

                    reg = bot.send_message(chat_id=message.chat.id, text=good_message_place, disable_notification=True,
                                           reply_markup=buttons(date_list))

                    bot.register_next_step_handler(reg,
                                                   lambda message_reg_dat: reg_date(message_reg_dat, 0))

        else:

            cursor = conn.cursor()
            cursor.execute("UPDATE users SET reserve = ? WHERE user_id = ?", (place_reserve, message.chat.id))
            cursor.close()

            if int(place) == 4:

                reg = bot.send_message(chat_id=message.chat.id, text=good_message_table, disable_notification=True,
                                       reply_markup=buttons(table_res_main_list))

                bot.register_next_step_handler(reg, reg_reserve)

            else:

                reg = bot.send_message(chat_id=message.chat.id, text=good_message_place, disable_notification=True,
                                       reply_markup=buttons(date_list))

                bot.register_next_step_handler(reg, lambda message_reg_dat: reg_date(message_reg_dat, 0))


# –§—É–Ω–∫—Ü–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞
def reg_reserve(message: types.Message) -> None:

    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–æ–ª–∏–∫, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–ª–∞ –±—É–¥–µ—Ç "–û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ª"

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    Returns
    -------
    None
    """

    user_id = message.from_user.id
    user_table_number = message.text

    try:

        table_number = int(user_table_number)

        if 1 <= table_number <= 12:

            date_list = list(new_month())

            cursor = conn.cursor()
            cursor.execute("UPDATE users SET new_table = ? WHERE user_id = ?", (table_number, user_id))
            cursor.close()

            reg = bot.send_message(
                chat_id=message.chat.id,
                text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–æ–ª–∏–∫ ‚Ññ{table_number}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n\n"
                f"(–ö –ø—Ä–∏–º–µ—Ä—É: "
                + f"{datetime.now().date().day}".zfill(2)
                + "."
                + f"{datetime.now().date().month}".zfill(2)
                + "."
                + f"{datetime.now().date().year}"
                + ")üëá", disable_notification=True,
                reply_markup=buttons(date_list))

            bot.register_next_step_handler(reg, lambda message_reg_dat: reg_date(message_reg_dat, table_number))

        else:

            reg = bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–∏–∫ –æ—Ç 1 –¥–æ 12:",
                                   disable_notification=True,
                                   reply_markup=buttons(table_res_main_list))

            bot.register_next_step_handler(reg, reg_reserve)

    except ValueError:

        reg = bot.send_message(chat_id=message.chat.id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞ —Ü–∏—Ñ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ 12:",
                               disable_notification=True,
                               reply_markup=buttons(table_res_main_list))

        bot.register_next_step_handler(reg, reg_reserve)


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def reg_date(message: types.Message, table_number: int) -> None:

    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä–æ–≤–Ω–∏—è –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏ —Å—Ç–æ–ª–∏–∫–∞, –ª–∏–±–æ –ø–æ—Å–ª–µ –±—Ä–æ–Ω–∏ –∑–∞–ª–∞

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    table_number : int
        –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è (–ï—Å–ª–∏ —Å—Ç–æ–ª–∏–∫–∞ –Ω–µ—Ç, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ == 0)

    Returns
    -------
    None
    """

    user_reg_date = message.text

    try:

        while True:

            num = verify_data(user_reg_date)

            if num in errors_date:

                desc = errors_date[num]

            elif num == 4:
                break

            else:

                desc = (
                        f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ\n\n"
                        f"(–ö –ø—Ä–∏–º–µ—Ä—É: "
                        + f"{datetime.now().date().day}".zfill(2)
                        + "."
                        + f"{datetime.now().date().month}".zfill(2)
                        + "."
                        + f"{datetime.now().date().year}"
                        + ")üëá")

            reg = bot.send_message(chat_id=message.chat.id, text=desc, disable_notification=True)

            bot.register_next_step_handler(reg, lambda message_reg_dat: reg_date(message_reg_dat, 0))

            return

    except ValueError:

        reg = bot.send_message(chat_id=message.chat.id, text=f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
                                                             f"–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–Ω–µ–π!\n\n"
                                                             f"–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –¥–∞—Ç—É!",
                               disable_notification=True)

        bot.register_next_step_handler(reg, lambda message_reg_dat: reg_date(message_reg_dat, 0))

        return

    user_reg_date = user_reg_date.split(".")

    user_reg_date = (
        f"{user_reg_date[0]}".zfill(2)
        + "."
        + f"{user_reg_date[1]}".zfill(2)
        + "."
        + f"{user_reg_date[2]}")

    reg = bot.send_message(chat_id=message.chat.id, text=f"–û–≥–æ! –ï–¥–µ–º –¥–∞–ª—å—à–µ!\n\n"
                                                         f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –í—ã –ø—Ä–∏–¥—ë—Ç–µ –∫ –Ω–∞–º\n\n"
                                                         f"(–ö –ø—Ä–∏–º–µ—Ä—É: 18:00)",
                           disable_notification=True, reply_markup=buttons(time_menu))

    bot.register_next_step_handler(reg, lambda message_reg_tim: reg_time(message_reg_tim, user_reg_date, table_number))


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
def reg_time(message: types.Message, user_reg_date: str, table_number: int) -> None:

    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∞—Ç—ã

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    user_reg_date : str
        –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –≤ –∑–∞–ª–µ –∏–ª–∏ –∑–∞–ª–∞ (–≤ —Å–ª—É—á–∞–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ)

    table_number : int
        –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è (–ï—Å–ª–∏ —Å—Ç–æ–ª–∏–∫–∞ –Ω–µ—Ç, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ == 0)

    Returns
    -------
    None
    """

    user_reg_time = message.text

    num = verify_time(user_reg_time)

    if num in errors_time:

        message = bot.send_message(chat_id=message.chat.id, text=errors_time[num], disable_notification=True)

        bot.register_next_step_handler(
            message, lambda message_reg_tim: reg_time(message_reg_tim, user_reg_date, table_number))

        return

    else:

        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE date = ? AND time = ? AND new_table = ?",
                       (user_reg_date, user_reg_time, table_number))
        result = cursor.fetchall()
        cursor.close()

        for row in result:

            if row:

                message = bot.send_message(chat_id=message.chat.id,
                                           text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–∏–∫ —É–∂–µ –∑–∞–Ω—è—Ç –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.\n\n"
                                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è üëá", disable_notification=True)

                bot.register_next_step_handler(
                    message, lambda message_reg_tim: reg_time(message_reg_tim, user_reg_date, table_number))

                return

        cursor = conn.cursor()
        cursor.execute("SELECT phone FROM users WHERE user_id = ?", [message.chat.id])
        result = cursor.fetchone()
        cursor.close()

        if result and result[0] is not None and result[0] != "":

            key_phone = ReplyKeyboardMarkup(resize_keyboard=True)
            btn_1 = types.KeyboardButton(f"–ú–æ–π –Ω–æ–º–µ—Ä", request_contact=True)
            key_phone.add(btn_1)

        else:

            key_phone = types.ReplyKeyboardRemove()

        reg = bot.send_message(
            chat_id=message.chat.id,
            text=f"–û—Å—Ç–∞–ª—Å—è –≤—Å–µ–≥–æ –æ–¥–∏–Ω —à–∞–≥!\n\n"
            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –°–í–û–ô –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏\n\n"
            f"(–ü—Ä–∏–º–µ—Ä: +7-999-999-99-99)", disable_notification=True,
            reply_markup=key_phone
        )

        bot.register_next_step_handler(
            reg, lambda message_reg_ph: reg_phone(message_reg_ph, user_reg_date, user_reg_time, table_number))


# –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def reg_phone(message: types.Message, user_reg_date: str, user_reg_time: str, table_number: int) -> None:

    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    user_reg_date : str
        –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –≤ –∑–∞–ª–µ –∏–ª–∏ –∑–∞–ª–∞ (–≤ —Å–ª—É—á–∞–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ)

    user_reg_time : str
        –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –∏–ª–∏ –∑–∞–ª–∞

    table_number : int
        –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è (–ï—Å–ª–∏ —Å—Ç–æ–ª–∏–∫–∞ –Ω–µ—Ç, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ == 0)

    Returns
    -------
    None
    """

    user_id = message.from_user.id

    if message.contact:

        user_reg_phone = message.contact.phone_number

        if user_reg_phone[0] == '+':

            user_reg_phone = (user_reg_phone[:2] + '-' + user_reg_phone[2:5] + '-' + user_reg_phone[5:8] + '-' +
                              user_reg_phone[8:10] + '-' + user_reg_phone[10:])

        else:

            user_reg_phone = ('+' + user_reg_phone[:1] + '-' + user_reg_phone[1:4] + '-' + user_reg_phone[4:7] + '-' +
                              user_reg_phone[7:9] + '-' + user_reg_phone[9:])

    else:

        user_reg_phone = message.text

    while True:

        num = verify_phone(user_reg_phone)

        if num in errors_phone:

            desc = errors_phone[num]

        elif num == 4:
            break

        else:

            desc = errors_phone[5]

        reg = bot.send_message(chat_id=message.chat.id, text=desc, disable_notification=True)

        bot.register_next_step_handler(
            reg,
            lambda message_reg_ph: reg_phone(message_reg_ph, user_reg_date, user_reg_time, table_number))

        return

    cursor = conn.cursor()
    cursor.execute("UPDATE users SET phone = ? WHERE user_id = ?", (user_reg_phone, user_id))
    conn.commit()
    cursor.close()

    congratulation = bot.send_message(chat_id=message.chat.id, text=f"–£—Ä–∞! –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
                                                                    f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞!",
                                      disable_notification=True, reply_markup=types.ReplyKeyboardRemove())

    message_admin(message, user_reg_date, user_reg_time, table_number, congratulation.message_id)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É / –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∂–µ–ª–∞–Ω–∏–∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ
def message_admin(message: types.Message, user_reg_date: str, user_reg_time: str,
                  table_number: int, congratulation: int) -> None:

    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É / –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ (–∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü—É, –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–≤—ã—Ö) –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    user_reg_date : str
        –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –≤ –∑–∞–ª–µ –∏–ª–∏ –∑–∞–ª–∞ (–≤ —Å–ª—É—á–∞–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ)

    user_reg_time : str
        –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –∏–ª–∏ –∑–∞–ª–∞

    table_number : int
        –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è (–ï—Å–ª–∏ —Å—Ç–æ–ª–∏–∫–∞ –Ω–µ—Ç, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ == 0)

    congratulation : int
        ID –°–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏ –Ω–∞ –±—Ä–æ–Ω—å

    Returns
    -------
    None
    """

    try:

        user_id = message.from_user.id

        cursor = conn.cursor()
        cursor.execute("UPDATE users SET date = ?, time = ?, new_table = ? WHERE user_id = ?",
                       (user_reg_date, user_reg_time, table_number, user_id))
        cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
        user = cursor.fetchone()
        cursor.execute("UPDATE users SET date = NULL, time = NULL WHERE user_id = ?", (user_id,))
        cursor.execute("SELECT * FROM users WHERE adm = 'admin'")
        user_admin = cursor.fetchall()
        conn.commit()
        cursor.close()

        key_reserve = InlineKeyboardMarkup()
        btn_1 = InlineKeyboardButton(
            "–î–æ–±—Ä–æ ‚úÖ",
            callback_data=f"res_{user_reg_date}_{user_reg_time}_{message.chat.id}_{congratulation}_"
            f"{table_number}_{user_id}")
        btn_2 = InlineKeyboardButton("–û—Ç–∫–∞–∑ ‚ùå", callback_data=f"resNot_{user_id}_{message.chat.id}_{congratulation}")
        key_reserve.add(btn_1, btn_2)

        if user_admin:

            if user[10] > 0:

                for i in range(len(user_admin)):

                    bot.send_message(
                        user_admin[i][1],
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[2]} {user[3]} –∂–µ–ª–∞–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:\n\n"
                        f"1Ô∏è‚É£ –ú–µ—Å—Ç–æ: {user[6]},\n\n"
                        f"2Ô∏è‚É£ –°—Ç–æ–ª–∏–∫: {user[10]},\n\n"
                        f"3Ô∏è‚É£ –î–∞—Ç–∞: {user[7]},\n\n"
                        f"4Ô∏è‚É£ –í—Ä–µ–º—è: {user[8]},\n\n"
                        f"üì±: {user[9]}\n\n"
                        f"–ò –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:",
                        reply_markup=key_reserve)

            else:

                for i in range(len(user_admin)):

                    bot.send_message(
                        user_admin[i][1],
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[2]} {user[3]} –∂–µ–ª–∞–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:\n\n"
                        f"1Ô∏è‚É£ –ú–µ—Å—Ç–æ: {user[6]},\n\n"
                        f"2Ô∏è‚É£ –î–∞—Ç–∞: {user[7]},\n\n"
                        f"3Ô∏è‚É£ –í—Ä–µ–º—è: {user[8]},\n\n"
                        f"üì±: {user[9]}\n\n"
                        f"–ò –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:",
                        reply_markup=key_reserve)

        else:

            if user[10] > 0:

                bot.send_message(
                    owner,
                    f"–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –ø–æ—ç—Ç–æ–º—É –í–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[2]} {user[3]} –∂–µ–ª–∞–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:\n\n"
                    f"1Ô∏è‚É£ –ú–µ—Å—Ç–æ: {user[6]},\n\n"
                    f"2Ô∏è‚É£ –°—Ç–æ–ª–∏–∫: {user[10]},\n\n"
                    f"3Ô∏è‚É£ –î–∞—Ç–∞: {user[7]},\n\n"
                    f"3Ô∏è‚É£ –í—Ä–µ–º—è: {user[8]},\n\n"
                    f"üì±: {user[9]}\n\n"
                    f"–ò –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:",
                    reply_markup=key_reserve)

            else:

                bot.send_message(
                    owner,
                    f"–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã, –ø–æ—ç—Ç–æ–º—É –í–∞–º –ø—Ä–∏–¥—ë—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[2]} {user[3]} –∂–µ–ª–∞–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å:\n\n"
                    f"1Ô∏è‚É£ –ú–µ—Å—Ç–æ: {user[6]},\n\n"
                    f"2Ô∏è‚É£ –î–∞—Ç–∞: {user[7]},\n\n"
                    f"3Ô∏è‚É£ –í—Ä–µ–º—è: {user[8]},\n\n"
                    f"üì±: {user[9]}\n\n"
                    f"–ò –∂–¥—ë—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏:",
                    reply_markup=key_reserve)

    except BaseException:

        bot.delete_message(chat_id=message.from_user.id, message_id=congratulation)

        bot.send_message(chat_id=message.from_user.id, text=sorry_res_know,
                         reply_markup=inline_buttons(main_menu_button))


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@throttle(6)
def yes_reserve(call, user_reg_date: str, user_reg_time: str, table_number: str, userId: str) -> str:

    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º / –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏–ª–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º

    Parameters
    ----------
    call
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    user_reg_date : str
        –î–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –≤ –∑–∞–ª–µ –∏–ª–∏ –∑–∞–ª–∞ (–≤ —Å–ª—É—á–∞–µ –µ–≥–æ –Ω–∞–ª–∏—á–∏—è –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ)

    user_reg_time : str
        –í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–∏–∫–∞ –∏–ª–∏ –∑–∞–ª–∞

    table_number : str
        –ù–æ–º–µ—Ä —Å—Ç–æ–ª–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—Ä–æ–Ω–∏—Ä—É–µ—Ç—Å—è (–ï—Å–ª–∏ —Å—Ç–æ–ª–∏–∫–∞ –Ω–µ—Ç, —Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–æ–ª–∏–∫–∞ == 0)

    userId
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ

    Returns
    -------
    str
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–û—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ / –≤–ª–∞–¥–µ–ª—å—Ü–∞) —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    cursor = conn.cursor()
    cursor.execute("UPDATE users SET date = ?, time = ?, new_table = ? WHERE user_id = ?",
                   (user_reg_date, user_reg_time, table_number, int(userId)))
    cursor.execute("SELECT * FROM users WHERE user_id = ?", [int(userId)])
    user = cursor.fetchone()
    cursor.close()
    conn.commit()

    bot.delete_message(call.message.chat.id, call.message.message_id)

    if int(user[10]) > 0:
        return (f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –±—Ä–æ–Ω—å:\n\n"
                f"–ó–∞–∫–∞–∑—á–∏–∫: {user[2]} {user[3]},\n\n"
                f"–ú–µ—Å—Ç–æ: {user[6]},\n\n"
                f"–°—Ç–æ–ª–∏–∫: {user[10]},\n\n"
                f"–ß–∏—Å–ª–æ: {user[7]},\n\n"
                f"–í—Ä–µ–º—è: {user[8]},\n\n"
                f"üì±: {user[9]}\n\n")

    else:
        return (f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –±—Ä–æ–Ω—å:\n\n"
                f"–ó–∞–∫–∞–∑—á–∏–∫: {user[2]} {user[3]},\n\n"
                f"–ú–µ—Å—Ç–æ: {user[6]},\n\n"
                f"–ß–∏—Å–ª–æ: {user[7]},\n\n"
                f"–í—Ä–µ–º—è: {user[8]},\n\n"
                f"üì±: {user[9]}\n\n")


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–∞–∑–∞ –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
@throttle(6)
def not_reserve(users: str) -> str:

    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ë–î –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏

    Parameters
    ----------
    users : str
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ —á–∏—Å–ª–æ

    Returns
    -------
    str
        –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–û—Ç–≤–µ—Ç –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ / –≤–ª–∞–¥–µ–ª—å—Ü–∞) —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """

    users_id = int(users)

    cursor = conn.cursor()
    cursor.execute("UPDATE users SET reserve = NULL, date = NULL, time = NULL, new_table = NULL WHERE user_id = ?",
                   (users_id,))
    cursor.execute("SELECT * FROM users WHERE user_id = ?", [users_id])
    user = cursor.fetchone()
    conn.commit()
    cursor.close()

    return f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –±—Ä–æ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[2]} {user[3]} —Å –Ω–æ–º–µ—Ä–æ–º {user[9]}"
