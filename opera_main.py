from opera_owner import *


@bot.message_handler(commands=["start"])
@throttle(5)
def send_welcome(message: types.Message) -> None:

    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '/start' –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    Returns
    -------
    None
    """

    cursor = conn.cursor()
    cursor.execute(
        """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                name TEXT,
                surname TEXT,
                birthday INTEGER,
                star INTEGER,
                reserve TEXT,
                date INTEGER,
                time INTEGER,
                phone INTEGER,
                new_table INTEGER,
                adm TEXT DEFAULT '',
                sex TEXT
            )
        """
    )
    conn.commit()

    user_id = message.chat.id

    if user_id == owner:

        bot.send_message(message.chat.id, owner_menu_desc, reply_markup=inline_buttons(owner_menu, buttons_per_row=2))

    else:

        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
        user = cursor.fetchone()
        cursor.close()

        if user:

            if user[11] == "admin":

                bot.send_message(message.chat.id, admin_menu_desc, reply_markup=inline_buttons(admin_menu))

            else:

                user_name = user[2]

                bot.send_message(message.chat.id, f"–†–∞–¥—ã —Å–Ω–æ–≤–∞ –í–∞—Å –≤–∏–¥–µ—Ç—å, {user_name}!",
                                 reply_markup=inline_buttons(user_menu))

        else:

            welcome = bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ üëã\n\n–í—ã —Ä–∞–Ω—å—à–µ —É –Ω–∞—Å –Ω–µ –±—ã–ª–∏ ü§î\n\n"
                                                        f"–î–∞–≤–∞–π—Ç–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!")

            sleep(4)

            send_name = bot.edit_message_text(chat_id=message.chat.id, message_id=welcome.message_id,
                                              text="–í–≤–µ–¥–∏—Ç–µ –°–≤–æ—ë –∏–º—è üëá")

            bot.register_next_step_handler(send_name, reg_name)

        cursor.close()


@bot.message_handler(commands=["star"])
@throttle(5)
def send_star(message: types.Message) -> None:

    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –æ—Ü–µ–Ω–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –æ—Ç–∑—ã–≤–∞ –æ –∫–æ–º–ø–∞–Ω–∏–∏

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    Returns
    -------
    None
    """

    user_id = message.chat.id

    if user_id == owner:

        pass

    else:

        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
        user = cursor.fetchone()
        cursor.close()

        if user[11] == "admin":

            pass

        else:

            bot.send_message(chat_id=message.chat.id, text=review_desc, reply_markup=inline_buttons(rate_menu))


@bot.message_handler(commands=["my_res"])
@throttle(5)
def mess_info(message: types.Message) -> None:

    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ —Ç–µ–∫—É—â–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

    Parameters
    ----------
    message : types.Message
        –ó–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã

    Returns
    -------
    None
    """

    user_id = message.chat.id

    if user_id == owner:

        pass

    else:

        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
        user = cursor.fetchone()
        cursor.close()

        if user[11] == "admin":

            pass

        else:

            edit = bot.send_message(chat_id=message.chat.id, text="–°–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")

            bot.send_chat_action(chat_id=message.chat.id, action=ChatAction.TYPING)

            sleep(4)

            info_reserve(message, edit)


@bot.callback_query_handler(func=lambda call: True)
def callback_query(call: types.CallbackQuery) -> None:

    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å—ã

    Parameters
    ----------
    call
        –ö—ç–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–Ω–æ–ø–∫–∏

    Raises
    ------
    BaseException
        –õ–æ–≤–∏—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è

    Returns
    -------
    None
    """

    # –í–ª–∞–¥–µ–ª–µ—Ü ---------------------------------------

    if call.data == "+ –∞–¥–º–∏–Ω":

        adm_add(call.message)

    elif call.data == "- –∞–¥–º–∏–Ω":

        adm_del(call.message)

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ---------------------------------------

    elif call.data == "–ë—Ä–æ–Ω—å üÜë":

        try:

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
                                  reply_markup=inline_buttons(admin_res_menu, buttons_per_row=1))

        except BaseException:

            pass

    elif call.data == "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –±—Ä–æ–Ω—å":

        delete_res(call.message)

    elif call.data == "–í—Å—ë –±—Ä–æ–Ω–∏—Ä–æ–≤–Ω–∏–µ":

        try:

            cursor = conn.cursor()
            cursor.execute("UPDATE users SET reserve = NULL, date = NULL, time = NULL, new_table = NULL")
            cursor.close()
            conn.commit()

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—Å–∏–ª–∏ –≤—Å–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è!",
                                  reply_markup=inline_buttons(main_menu_button))

        except BaseException:

            pass

    elif call.data == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è':

        opera_administrator(call, 'reg')

    elif call.data.startswith("admDel_"):

        adm_menu = call.data.split("_")[-1]

        all_photo(call.message, adm_menu)

    elif call.data.startswith("admAdd_"):

        adm_menu = call.data.split("_")[-1]

        new_photo(call.message, adm_menu)

    elif call.data == '‚ö†Ô∏è–†–∞—Å—Å—ã–ª–∫–∞ ‚ö†Ô∏è':

        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=menu_news_desc, reply_markup=inline_buttons(news_menu))

    elif call.data == '–ú—É–∂—á–∏–Ω–∞–º':

        sex = '–ú—É–∂—Å–∫–æ–π'

        new_sex_func(call.message, sex)

    elif call.data == '–ñ–µ–Ω—â–∏–Ω–∞–º':

        sex = '–ñ–µ–Ω—Å–∫–∏–π'

        new_sex_func(call.message, sex)

    elif call.data == '–í—Å–µ–º':

        sex = None

        new_sex_func(call.message, sex)

    # –ü—Ä–æ—Ñ–∏–ª—å ---------------------------------------

    elif call.data == "üë§–ü—Ä–æ—Ñ–∏–ª—å":

        get_user_data(call.message)

    elif call.data == "üîñ –ú–æ—è –±—Ä–æ–Ω—å":

        try:

            info_reserve(call.message, call.message)

        except BaseException:

            pass

    elif call.data == "–û—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω—å":

        try:

            bot.send_chat_action(chat_id=call.message.chat.id, action=ChatAction.TYPING)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=cancel_res_desc, reply_markup=inline_buttons(main_menu_button))

        except BaseException:

            pass

    # –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ ---------------------------------------

    elif (call.data == "–†–µ–∑–µ—Ä–≤ üîè") or (call.data == "–ù–∞–∑–∞–¥ ‚ñ∂Ô∏è"):

        try:

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!",
                                  reply_markup=inline_buttons(res_menu, buttons_per_row=2))

        except BaseException:

            pass

    elif call.data in place_category:

        try:

            bot.delete_message(call.message.chat.id, call.message.message_id)

            category_value = place_category[call.data]

            sending_photo(call.message, category_value)

        except BaseException:

            pass

    elif call.data.startswith("reserve_"):

        try:

            bot.delete_message(call.message.chat.id, call.message.message_id)

            place = call.data.split("_")[-1]

            verify_reserve(call.message, place)

        except BaseException:

            pass

    elif call.data == "–ö –∑–∞–ª–∞–º ‚èèÔ∏è":

        try:

            bot.delete_message(call.message.chat.id, call.message.message_id)

            bot.send_message(chat_id=call.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É!", disable_notification=True,
                             reply_markup=inline_buttons(res_menu, buttons_per_row=2))

        except BaseException:

            pass

    elif call.data.startswith("res_"):

        try:

            date, times, cht_id, mes_id, table, userId = (call.data.split("_")[1], call.data.split("_")[2],
                                                          call.data.split("_")[3], call.data.split("_")[4],
                                                          call.data.split("_")[-2], call.data.split("_")[-1])

            bot.delete_message(cht_id, mes_id)

            bot.send_message(call.message.chat.id, text=yes_reserve(call, date, times, table, userId),
                             disable_notification=True)

            if int(table) != 0:

                bot.send_message(
                    int(userId),
                    text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
                         f"–û–∂–∏–¥–∞–µ–º –í–∞—Å {date} –≤ {times} –Ω–∞ {table} —Å—Ç–æ–ª–∏–∫!\n\n"
                         f"‚ùóÔ∏è–°–≤–æ—ë –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ‚ùóÔ∏è\n\n"
                         "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=inline_buttons(menu_user_res)
                )

            else:

                bot.send_message(
                    int(userId),
                    text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!\n\n"
                         f"–û–∂–∏–¥–∞–µ–º –í–∞—Å {date} –≤ {times}!\n\n"
                         f"‚ùóÔ∏è–°–≤–æ—ë –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ –∏–ª–∏ –∂–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ‚ùóÔ∏è\n\n"
                         "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!", reply_markup=inline_buttons(menu_user_res)
                )

        except:

            try:

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=admin_desc_know)

                sleep(5)

                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            except:

                pass

    elif call.data.startswith("resNot_"):

        try:

            userId, chatId, messId = call.data.split("_")[1], call.data.split("_")[-2], call.data.split("_")[-1]

            bot.send_chat_action(chat_id=call.message.chat.id, action=ChatAction.TYPING)

            bot.delete_message(chatId, messId)

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text=not_reserve(userId))

            bot.send_chat_action(chat_id=chatId, action=ChatAction.TYPING)

            bot.send_message(chat_id=chatId, text=sorry_res_not, reply_markup=inline_buttons(main_menu_button))

        except:

            try:

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=admin_desc_know)

                sleep(5)

                bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

            except:

                pass

    # –ú–µ–Ω—é ---------------------------------------

    elif (call.data == "üçΩ –ú–µ–Ω—éÔ∏è") or (call.data == "üîÅ –ú–µ–Ω—éÔ∏è"):

        try:

            user_id = call.message.chat.id

            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
            user = cursor.fetchone()
            cursor.close()

            if (user[11] == "admin") or (user[1] == owner):

                desc = "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å!"

            else:

                desc = "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω–æ–µ –º–µ–Ω—é!"

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=desc,
                                  reply_markup=inline_buttons(food_menu, buttons_per_row=2))

        except BaseException:

            pass

    elif call.data in menu_category:

        try:

            user_id = call.message.chat.id

            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
            user = cursor.fetchone()
            cursor.close()

            if (user[11] == "admin") or (user[1] == owner):

                category_value = menu_category[call.data]

                opera_administrator(call, category_value)

            else:

                bot.delete_message(call.message.chat.id, call.message.message_id)

                category_value = menu_category[call.data]

                sending_photo(call.message, category_value)

        except BaseException:

            pass

    elif call.data == "–ö–æ –≤—Å–µ–º –º–µ–Ω—é ‚ÜòÔ∏è":

        try:

            bot.delete_message(call.message.chat.id, call.message.message_id)

            bot.send_message(chat_id=call.message.chat.id, text=menu_desc,
                             disable_notification=True, reply_markup=inline_buttons(food_menu, buttons_per_row=2))

        except BaseException:

            pass

    # –ù–æ–≤–∏–Ω–∫–∏ ---------------------------------------

    elif (call.data == "–ù–æ–≤–∏–Ω–∫–∏ üî•") or (call.data == "üîÅ –ù–æ–≤–∏–Ω–∫–∏"):

        try:

            user_id = call.message.chat.id

            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
            user = cursor.fetchone()
            cursor.close()

            if (user[11] == "admin") or (user[1] == owner):

                category_value = "new"

                opera_administrator(call, category_value)

            else:

                bot.delete_message(call.message.chat.id, call.message.message_id)

                sending_photo(call.message, "base_new")

        except BaseException:

            pass

    # –ê–∫—Ü–∏–∏ ---------------------------------------

    elif (call.data == "üéÅ –ê–∫—Ü–∏–∏") or (call.data == "üîÅ –ê–∫—Ü–∏–∏"):

        try:

            user_id = call.message.chat.id

            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
            user = cursor.fetchone()
            cursor.close()

            if (user[11] == "admin") or (user[1] == owner):

                category_value = "sale"

                opera_administrator(call, category_value)

            else:

                bot.delete_message(call.message.chat.id, call.message.message_id)

                sale_photo(call.message)

        except BaseException:

            pass

    elif call.data == "15 %":

        bot.answer_callback_query(call.id, text=percent_desc, show_alert=True)

    elif call.data == "–ü–æ–¥–∞—Ä–æ–∫ üéâ":

        bot.answer_callback_query(call.id, text=desc_present, show_alert=True)

    # –û—Ç–∑—ã–≤ ---------------------------------------

    elif call.data == "–û—Ç–∑—ã–≤ üí¨":

        try:

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=review_desc,
                                  reply_markup=inline_buttons(rate_menu))

        except BaseException:

            pass

    elif call.data in ["1‚≠êÔ∏è", "2‚≠êÔ∏è", "3‚≠êÔ∏è", "4‚≠êÔ∏è", "5‚≠êÔ∏è"]:

        stars = int(call.data.replace("‚≠êÔ∏è", ""))

        if stars <= 3:

            min_star(call.message, stars)

        else:

            max_star(call.message, stars)

    # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è ---------------------------------------

    elif (call.data == "‚ö°Ô∏è–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è‚ö°Ô∏è") or (call.data == "üîÅ –≠–≤–µ–Ω—Ç"):

        try:

            user_id = call.message.chat.id

            cursor = conn.cursor()
            cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
            user = cursor.fetchone()
            cursor.close()

            if (user[11] == "admin") or (user[1] == owner):

                category_value = "event"

                opera_administrator(call, category_value)

            else:

                bot.delete_message(call.message.chat.id, call.message.message_id)

                sending_photo(call.message, "base_event")

        except BaseException:

            pass

    # –î—Ä—É–≥–æ–µ ---------------------------------------

    elif call.data == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":

        try:

            user_id = call.message.chat.id

            if user_id == owner:

                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text=owner_menu_desc, reply_markup=inline_buttons(owner_menu, buttons_per_row=2))

            else:

                cursor = conn.cursor()
                cursor.execute("SELECT * FROM users WHERE user_id = ?", [user_id])
                user = cursor.fetchone()
                cursor.close()

                if user:

                    if user[11] == "admin":

                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text=admin_menu_desc, reply_markup=inline_buttons(admin_menu))

                    else:

                        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                              text=user_menu_desc, reply_markup=inline_buttons(user_menu))

        except BaseException:

            pass

    elif call.data.startswith("prev_"):

        page = int(call.data.split("_")[-1]) - 1

        menu = call.data.split("_")[-2]

        if page < 1:
            total_pages = get_total_pages(f"base_{menu}")

            page = total_pages

        sending_photo(call.message, f"base_{menu}", page=page, previous_message=call.message.id)

    elif call.data.startswith("next_"):

        page = int(call.data.split("_")[-1]) + 1

        menu = call.data.split("_")[-2]

        total_pages = get_total_pages(f"base_{menu}")

        if page > total_pages:

            page = 1

        sending_photo(call.message, f"base_{menu}", page=page, previous_message=call.message.message_id)

    elif call.data == "–í–µ—Ä–Ω—É—Ç—å—Å—è ‚§¥Ô∏è":

        try:

            bot.delete_message(call.message.chat.id, call.message.message_id)

            bot.send_message(chat_id=call.message.chat.id, text=user_menu_desc, disable_notification=True,
                             reply_markup=inline_buttons(user_menu))

        except BaseException:

            pass

    elif call.data == " ":

        pass

    else:

        bot.answer_callback_query(call.id, text="–ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")


while True:
    try:
        print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
        bot.polling(none_stop=True, interval=1)
    except:
        continue
